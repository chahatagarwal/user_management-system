from users.modules import db, Column, func

#User Model for storing user related details
class User(db.Model):
    __tablename__ = "User"
    #phone number -> Primary Key
    user_phone = db.Column(db.Integer,primary_key=True, nullable=False)
    user_fname = db.Column(db.String(255), nullable=False)
    user_lname = db.Column(db.String(255), nullable=False)
    #email-id is unqiue for each user
    user_email = db.Column(db.String(255),unique=True,nullable=False)
    user_password = db.Column(db.String(255), nullable=False)
    #Role type: Admin->1 & Agent->0 
    user_role = db.Column(db.Boolean,default=0,nullable=False)
    #is_deleted: Is account deactivated or not? -> 1(Yes) & 0(No) 
    is_deleted = db.Column(db.Boolean,default=0,nullable=False)
    #is_activated: Is account activated by admin? 1(Yes) & 0(No) 
    is_activated = db.Column(db.Boolean,default=0,nullable=False)
    
    #helps to convert objects to dictionary of iterable form with all necessary data
    def as_dict(self):
       return {c.name: getattr(self, c.name) for c in self.__table__.columns}


#Logs to store the actionable points
class Log(db.Model):
    __tablename__ = "Log"
    #id autogenerated - Primary key
    log_id = db.Column(db.Integer,primary_key=True, nullable=False,autoincrement=True)
    #phone_number becomes Foreign key in Log table
    log_user_phone = db.Column(db.Integer, nullable=False)
    #IP address of the remote user
    log_ip_address = db.Column(db.String(255), nullable=False)
    #which attribute is changed
    log_attribute = db.Column(db.String(255), nullable=False)
    #old & new value of the changed attributes
    log_old_value = db.Column(db.String(255), nullable=False)
    log_new_value = db.Column(db.String(255), nullable=False)
    #date & time when the remote user does an action
    log_datetime = db.Column(db.DateTime(timezone=True), default=func.now(), nullable=False)

    #helps to convert objects to dictionary of iterable form with all necessary data
    def as_dict(self):
       return {c.name: getattr(self, c.name) for c in self.__table__.columns}